#!/usr/bin/env python3.10

import asyncio
import json
import logging
import os
from datetime import datetime

import discord
from discord import app_commands
from discord.ext import commands
from openai import AsyncOpenAI

from config import Config

# --- Load configuration ---
config = Config()
DISCORD_TOKEN = config.discord_token
OPENAI_API_KEY = config.openai_api_key
STATUS = config.status
OPENAI_BASE_URL = config.openai_base_url
OPENAI_MODEL = config.openai_model
OPENAI_INSTRUCTIONS = config.openai_instructions

# --- Setup logging ---
logging.basicConfig(
    level=logging.INFO, format="[%(asctime)s] %(levelname)s: %(message)s"
)

# --- Initialize channel chat IDs dictionary ---
CHANNEL_CHAT_IDS: dict[str, str | None] = {}

# --- Initialize OpenAI client ---
openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY, base_url=OPENAI_BASE_URL)


# --- Helper function to mention user ---
def mention_user(user: discord.abc.User) -> str:
    return user.mention if hasattr(user, "mention") else f"<@{user.id}>"


# --- Custom Bot with setup_hook for slash commands ---
class MoonBot(commands.Bot):
    async def setup_hook(self):
        await self.add_cog(ChatCommand(self))
        await self.tree.sync()
        self.tree_synced = True


# --- Initialize bot with intents ---
intents = discord.Intents.default()
intents.message_content = True
bot = MoonBot(command_prefix="!", intents=intents)


# --- Slash command for chat ---
class ChatCommand(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    @app_commands.command(name="chat", description="üí¨ G·ª≠i c√¢u h·ªèi t·ªõi Moon")
    @app_commands.describe(
        question="C√¢u h·ªèi ho·∫∑c n·ªôi dung mu·ªën h·ªèi",
        tool="C√¥ng c·ª• h·ªó tr·ª£: None, Web search",
    )
    @app_commands.choices(
        tool=[
            app_commands.Choice(name="None", value="none"),
            app_commands.Choice(name="Web search", value="web_search"),
        ]
    )
    async def chat(
        self,
        interaction: discord.Interaction,
        question: str,
        tool: app_commands.Choice[str] = None,
    ):
        channel_id = str(interaction.channel_id)
        chat_id = CHANNEL_CHAT_IDS.get(channel_id)
        await interaction.response.defer(thinking=True)
        tool_value = tool.value if tool else "none"
        prompt = f"<@{interaction.user.id}>: {question.strip()}"
        answer, new_chat_id = await ask_openai(prompt, tool=tool_value, chat_id=chat_id)
        CHANNEL_CHAT_IDS[channel_id] = new_chat_id
        await interaction.followup.send(f"{answer}")

    @app_commands.command(name="new_chat", description="üÜï B·∫Øt ƒë·∫ßu ch·ªß ƒë·ªÅ m·ªõi v·ªõi Moon")
    async def new_chat(self, interaction: discord.Interaction):
        channel_id = str(interaction.channel_id)
        CHANNEL_CHAT_IDS[channel_id] = None
        await interaction.response.send_message(
            f"Moon b·∫Øt ƒë·∫ßu ch·ªß ƒë·ªÅ m·ªõi r·ªìi n√®, {mention_user(interaction.user)} h·ªèi g√¨ ti·∫øp ƒëi ·∫°! ‚ú®"
        )

    @app_commands.command(name="help", description="‚ùì H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Moon")
    async def help(self, interaction: discord.Interaction):
        help_text = (
            "**üåô H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Moon Discord Bot**\n"
            "\n"
            "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Moon! D∆∞·ªõi ƒë√¢y l√† c√°c l·ªánh h·ªØu √≠ch ƒë·ªÉ b·∫°n tr√≤ chuy·ªán v√† khai th√°c s·ª©c m·∫°nh AI c·ªßa Moon:\n"
            "\n"
            "**L·ªánh ch√≠nh:**\n"
            "- `/chat <c√¢u h·ªèi> [tool]`: ƒê·∫∑t c√¢u h·ªèi cho Moon, c√≥ th·ªÉ ch·ªçn c√¥ng c·ª• h·ªó tr·ª£ nh∆∞ Web search ƒë·ªÉ t√¨m ki·∫øm th√¥ng tin m·ªõi nh·∫•t.\n"
            "- `/new_chat`: B·∫Øt ƒë·∫ßu m·ªôt ch·ªß ƒë·ªÅ tr√≤ chuy·ªán ho√†n to√†n m·ªõi v·ªõi Moon.\n"
            "- ƒê·ªÅ c·∫≠p @MoonBot trong k√™nh ƒë·ªÉ h·ªèi nhanh b·∫±ng tin nh·∫Øn th√¥ng th∆∞·ªùng.\n"
            "\n"
            "**V√≠ d·ª• s·ª≠ d·ª•ng:**\n"
            "- `/chat H√£y t√≥m t·∫Øt tin t·ª©c c√¥ng ngh·ªá h√¥m nay`\n"
            "- `/chat G·ª£i √Ω c√°c ph∆∞∆°ng ph√°p h·ªçc ti·∫øng Anh hi·ªáu qu·∫£ tool:Web search`\n"
            "\n"
            "**L∆∞u √Ω quan tr·ªçng:**\n"
            "- Moon s·∫Ω ph·∫£n h·ªìi trong v√†i gi√¢y. N·∫øu kh√¥ng th·∫•y tr·∫£ l·ªùi, c√≥ th·ªÉ do m·∫°ng ho·∫∑c h·ªá th·ªëng ƒëang b·∫≠n.\n"
            "- H√£y d√πng `/new_chat` ƒë·ªÉ l√†m m·ªõi cu·ªôc tr√≤ chuy·ªán khi chuy·ªÉn ch·ªß ƒë·ªÅ, gi√∫p Moon tr·∫£ l·ªùi ch√≠nh x√°c h∆°n.\n"
            "- Khi c·∫ßn th√¥ng tin c·∫≠p nh·∫≠t, h√£y ch·ªçn tool:Web search ƒë·ªÉ Moon t√¨m ki·∫øm tr√™n Internet.\n"
            "- ƒê·ª´ng ng·∫°i h·ªèi b·∫•t c·ª© ƒëi·ªÅu g√¨!\n"
            "\n"
            "N·∫øu g·∫∑p kh√≥ khƒÉn ho·∫∑c c·∫ßn h·ªó tr·ª£ th√™m, h√£y li√™n h·ªá admin server. Ch√∫c b·∫°n tr√≤ chuy·ªán vui v·∫ª c√πng Moon! ‚ú®"
        )
        await interaction.response.send_message(help_text, ephemeral=True)


# --- Function to send prompt to OpenAI and return the response ---
async def ask_openai(
    prompt: str,
    tool: str = "none",
    chat_id: str = None,
    images: list[str] = None,
    force_model: str = None,
) -> tuple[str, str]:
    usage = load_token_usage()
    # Determine which model to use
    model = force_model or OPENAI_MODEL
    if model == "gpt-4.1" and usage["gpt-4.1"] >= TOKEN_LIMITS["gpt-4.1"]:
        model = "gpt-4.1-mini"
    tools = []
    if tool == "web_search":
        tools.append(
            {
                "type": "web_search_preview",
                "search_context_size": "medium",
                "user_location": {
                    "type": "approximate",
                    "country": "VN",
                },
            }
        )
    if images:
        input_blocks = [
            {"role": "user", "content": []},
        ]
        input_blocks[0]["content"].append({"type": "input_text", "text": prompt})
        for img_url in images:
            input_blocks[0]["content"].append(
                {"type": "input_image", "image_url": img_url}
            )
    else:
        input_blocks = prompt
    try:
        response = await openai_client.responses.create(
            model=model,
            instructions=OPENAI_INSTRUCTIONS,
            previous_response_id=chat_id,
            input=input_blocks,
            tools=tools if tools else None,
        )
        resp_usage = getattr(response, "usage", None)
        if resp_usage:
            used = getattr(resp_usage, "total_tokens", None)
            if used:
                usage[model] = usage.get(model, 0) + used
                save_token_usage(usage)
                logging.info(
                    f"Used {used} tokens for model {model}. Total usage: {usage[model]} tokens."
                )
        if model == "gpt-4.1" and usage["gpt-4.1"] > TOKEN_LIMITS["gpt-4.1"]:
            return await ask_openai(
                prompt, tool, chat_id, images, force_model="gpt-4.1-mini"
            )
        new_chat_id = getattr(response, "id", chat_id)
        return response.output_text.strip(), new_chat_id
    except Exception as e:
        return f"OpenAI error: {e}", chat_id


# --- Token usage tracking ---
TOKEN_USAGE_FILE = os.path.join(os.path.dirname(__file__), "token_usage.json")
TOKEN_LIMITS = {
    "gpt-4.1": 245_000,
    "gpt-4.1-mini": 2_495_000,
}


def load_token_usage():
    today = datetime.now().strftime("%Y-%m-%d")
    if not os.path.exists(TOKEN_USAGE_FILE):
        usage = {"date": today, "gpt-4.1": 0, "gpt-4.1-mini": 0}
        with open(TOKEN_USAGE_FILE, "w", encoding="utf-8") as f:
            json.dump(usage, f)
        return usage
    with open(TOKEN_USAGE_FILE, "r", encoding="utf-8") as f:
        usage = json.load(f)
    if usage.get("date") != today:
        usage = {"date": today, "gpt-4.1": 0, "gpt-4.1-mini": 0}
        with open(TOKEN_USAGE_FILE, "w", encoding="utf-8") as f:
            json.dump(usage, f)
    return usage


def save_token_usage(usage):
    with open(TOKEN_USAGE_FILE, "w", encoding="utf-8") as f:
        json.dump(usage, f)


# --- Discord bot events ---
@bot.event
async def on_ready():
    logging.info(f"{bot.user} is online and ready to chat!")
    if STATUS:
        await bot.change_presence(activity=discord.Game(STATUS))


@bot.event
async def on_message(message: discord.Message):
    if message.author == bot.user:
        return
    if bot.user in message.mentions:
        channel_id = str(message.channel.id)
        chat_id = CHANNEL_CHAT_IDS.get(channel_id)
        async with message.channel.typing():
            user_mention = mention_user(message.author)
            prompt_content = (
                message.content.replace(f"<@{bot.user.id}>", "")
                .replace(f"<@!{bot.user.id}>", "")
                .strip()
            )
            # Collect image URLs if any image attachments
            image_urls = [
                att.url
                for att in message.attachments
                if (att.content_type and att.content_type.startswith("image/"))
                or att.filename.lower().endswith(
                    (".png", ".jpg", ".jpeg", ".webp", ".gif")
                )
            ]
            if not prompt_content and not image_urls:
                await message.reply(f"{user_mention}, Moon c√≥ th·ªÉ h·ªó tr·ª£ g√¨ ·∫°?")
                return
            prompt = (
                f"<@{message.author.id}>: {prompt_content}"
                if prompt_content
                else f"<@{message.author.id}> g·ª≠i ·∫£nh:"
            )
            answer, new_chat_id = await ask_openai(
                prompt, chat_id=chat_id, images=image_urls if image_urls else None
            )
            CHANNEL_CHAT_IDS[channel_id] = new_chat_id
            await message.reply(f"{answer}")
    await bot.process_commands(message)


async def main():
    try:
        await bot.start(DISCORD_TOKEN)
    except discord.errors.HTTPException as e:
        logging.error(e)
        logging.error("\n\n\nBLOCKED BY RATE LIMITS\n\n\n")


if __name__ == "__main__":
    asyncio.run(main())
