#!/usr/bin/env python3.10

import asyncio
import json
import logging
import os
import random
import inspect
from datetime import datetime
from typing import Dict, List, Any, Callable

import discord
from discord import app_commands
from discord.ext import commands
from openai import AsyncOpenAI

from config import Config

# --- Load configuration ---
config = Config()
DISCORD_TOKEN = config.discord_token
STATUS = config.status
INSTRUCTIONS = config.instructions
OPENAI_API_KEY = config.openai_api_key
OPENAI_BASE_URL = config.openai_base_url
OPENAI_MODEL = config.openai_model

# --- Setup logging ---
logging.basicConfig(
    level=logging.INFO, format="[%(asctime)s] %(levelname)s: %(message)s"
)

logging.info("Starting Moon Discord Bot...")

# --- Initialize channel chat IDs dictionary ---
CHANNEL_CHAT_IDS: dict[str, str | None] = {}

# --- Random messages for new chat ---
NEW_CHAT_MESSAGES = [
    "Moon b·∫Øt ƒë·∫ßu ch·ªß ƒë·ªÅ m·ªõi r·ªìi n√®, {user} h·ªèi g√¨ ti·∫øp ƒëi ·∫°! ‚ú®",
    "Okay! Moon ƒë√£ reset t·∫•t c·∫£ v√† s·∫µn s√†ng cho cu·ªôc tr√≤ chuy·ªán m·ªõi v·ªõi {user}! üåü",
    "Xong r·ªìi! {user} c√≥ th·ªÉ b·∫Øt ƒë·∫ßu ch·ªß ƒë·ªÅ ho√†n to√†n m·ªõi v·ªõi Moon ngay b√¢y gi·ªù! üöÄ",
    "Fresh start! Moon ƒë√£ l√†m m·ªõi v√† ch·ªù {user} chia s·∫ª ƒëi·ªÅu g√¨ ƒë√≥ th√∫ v·ªã! üí´",
    "Done! Gi·ªù {user} c√≥ th·ªÉ n√≥i chuy·ªán v·ªõi Moon v·ªÅ b·∫•t k·ª≥ ch·ªß ƒë·ªÅ n√†o! üéâ",
    "Reset ho√†n t·∫•t! {user} mu·ªën kh√°m ph√° ch·ªß ƒë·ªÅ g√¨ v·ªõi Moon h√¥m nay? üåà",
    "Ch·ªß ƒë·ªÅ m·ªõi ƒë√£ s·∫µn s√†ng! {user} c√≥ c√¢u h·ªèi hay √Ω t∆∞·ªüng g√¨ th√∫ v·ªã kh√¥ng? ‚≠ê",
    "Moon ƒë√£ chu·∫©n b·ªã tinh th·∫ßn cho cu·ªôc tr√≤ chuy·ªán m·ªõi! {user} b·∫Øt ƒë·∫ßu th√¥i! üéä",
    "New chat activated! {user} c√≥ mu·ªën th·∫£o lu·∫≠n v·ªÅ ƒëi·ªÅu g√¨ ƒë·∫∑c bi·ªát kh√¥ng? üå∏",
]

# --- Random support messages ---
SUPPORT_MESSAGES = [
    "{user}, Moon c√≥ th·ªÉ h·ªó tr·ª£ g√¨ ·∫°? üåô",
    "{user}, c√≥ ƒëi·ªÅu g√¨ Moon c√≥ th·ªÉ gi√∫p ƒë·ª° kh√¥ng ·∫°? ‚ú®",
    "Ch√†o {user}! Moon s·∫µn s√†ng h·ªó tr·ª£ b·∫°n r·ªìi ƒë√¢y! üåü",
    "{user} c·∫ßn Moon gi√∫p g√¨ n√†o? C·ª© tho·∫£i m√°i h·ªèi nh√©! üí´",
    "Hi {user}! Moon c√≥ th·ªÉ l√†m g√¨ cho b·∫°n h√¥m nay? üöÄ",
    "{user}, Moon ƒëang l·∫Øng nghe v√† s·∫µn s√†ng h·ªó tr·ª£! üéä",
    "Xin ch√†o {user}! C√≥ g√¨ Moon c√≥ th·ªÉ gi√∫p b·∫°n kh√¥ng? üåà",
    "{user}, b·∫°n mu·ªën Moon h·ªó tr·ª£ v·ªÅ v·∫•n ƒë·ªÅ g√¨ v·∫≠y? üéâ",
    "Ch√†o b·∫°n {user}! Moon c√≥ th·ªÉ t∆∞ v·∫•n ho·∫∑c gi√∫p g√¨ kh√¥ng? ‚≠ê",
    "{user}, c√≥ c√¢u h·ªèi hay ch·ªß ƒë·ªÅ n√†o b·∫°n mu·ªën th·∫£o lu·∫≠n kh√¥ng? üå∏",
]

# --- Initialize OpenAI client ---
openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY, base_url=OPENAI_BASE_URL)


# --- Function calling system ---
class FunctionRegistry:
    """Registry ƒë·ªÉ qu·∫£n l√Ω c√°c function c√≥ th·ªÉ g·ªçi t·ª´ OpenAI"""
    
    def __init__(self):
        self.functions: Dict[str, Callable] = {}
        self.function_schemas: List[Dict[str, Any]] = []
    
    def register(self, name: str = None, description: str = "", parameters: Dict[str, Any] = None):
        """Decorator ƒë·ªÉ ƒëƒÉng k√Ω function"""
        def decorator(func: Callable):
            func_name = name or func.__name__
            
            # T·∫°o schema cho OpenAI API v·ªõi format m·ªõi
            schema = {
                "type": "function",
                "name": func_name,
                "description": description or func.__doc__ or f"Function {func_name}",
                "parameters": parameters or {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": False
                },
                "strict": True
            }
            
            if not parameters:
                # T·ª± ƒë·ªông t·∫°o parameters t·ª´ function signature
                sig = inspect.signature(func)
                props = {}
                required = []
                
                for param_name, param in sig.parameters.items():
                    if param_name == 'self':
                        continue
                        
                    param_type = "string"  # default
                    if param.annotation != inspect.Parameter.empty:
                        if param.annotation == int:
                            param_type = "integer"
                        elif param.annotation == float:
                            param_type = "number"
                        elif param.annotation == bool:
                            param_type = "boolean"
                        elif param.annotation == list:
                            param_type = "array"
                        elif param.annotation == dict:
                            param_type = "object"
                    
                    props[param_name] = {"type": param_type}
                    
                    # Trong strict mode, t·∫•t c·∫£ properties ƒë·ªÅu ph·∫£i c√≥ trong required
                    required.append(param_name)
                
                if props:
                    schema["parameters"] = {
                        "type": "object",
                        "properties": props,
                        "required": required,
                        "additionalProperties": False
                    }
            
            self.functions[func_name] = func
            self.function_schemas.append(schema)
            return func
        return decorator
    
    async def call_function(self, name: str, arguments: Dict[str, Any]) -> str:
        """G·ªçi function v√† tr·∫£ v·ªÅ k·∫øt qu·∫£"""
        if name not in self.functions:
            return f"Function '{name}' not found"
        
        try:
            func = self.functions[name]
            logging.info(f"Calling function {name} with arguments: {arguments}")
            
            if inspect.iscoroutinefunction(func):
                result = await func(**arguments)
            else:
                result = func(**arguments)
            
            logging.info(f"Function {name} returned: {result}")
            return str(result)
        except Exception as e:
            logging.error(f"Error calling function {name}: {e}")
            logging.error(f"Arguments were: {arguments}")
            return f"Error executing {name}: {str(e)}"
    
    def get_schemas(self) -> List[Dict[str, Any]]:
        """L·∫•y danh s√°ch schemas cho OpenAI"""
        return self.function_schemas

# Kh·ªüi t·∫°o registry
function_registry = FunctionRegistry()

# Import v√† ƒëƒÉng k√Ω t·∫•t c·∫£ functions
try:
    from functions import register_all_functions
    register_all_functions(function_registry)
    logging.info(f"ƒê√£ t·∫£i {len(function_registry.get_schemas())} functions")
except ImportError:
    logging.warning("Kh√¥ng t√¨m th·∫•y functions.py")
except Exception as e:
    logging.error(f"L·ªói khi t·∫£i functions: {e}")

# --- Helper function to mention user ---
def mention_user(user: discord.abc.User) -> str:
    return user.mention if hasattr(user, "mention") else f"<@{user.id}>"


# --- Custom Bot with setup_hook for slash commands ---
class MoonBot(commands.Bot):
    async def setup_hook(self):
        await self.add_cog(ChatCommand(self))
        await self.tree.sync()
        self.tree_synced = True


# --- Initialize bot with intents ---
intents = discord.Intents.default()
intents.message_content = True
bot = MoonBot(command_prefix="!", intents=intents)


# --- Slash command for chat ---
class ChatCommand(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    @app_commands.command(name="chat", description="üí¨ G·ª≠i c√¢u h·ªèi t·ªõi Moon")
    @app_commands.describe(
        question="C√¢u h·ªèi ho·∫∑c n·ªôi dung mu·ªën h·ªèi",
        tool="C√¥ng c·ª• h·ªó tr·ª£: None, Web search",
    )
    @app_commands.choices(
        tool=[
            app_commands.Choice(name="None", value="none"),
            app_commands.Choice(name="Web search", value="web_search"),
        ]
    )
    async def chat(
        self,
        interaction: discord.Interaction,
        question: str,
        tool: app_commands.Choice[str] = None,
    ):
        channel_id = str(interaction.channel_id)
        chat_id = CHANNEL_CHAT_IDS.get(channel_id)
        await interaction.response.defer(thinking=True)
        tool_value = tool.value if tool else "none"
        prompt = f"<@{interaction.user.id}>: {question.strip()}"
        answer, new_chat_id = await ask_openai(prompt, tool=tool_value, chat_id=chat_id)
        CHANNEL_CHAT_IDS[channel_id] = new_chat_id
        
        # ƒê·∫£m b·∫£o kh√¥ng g·ª≠i tin nh·∫Øn r·ªóng
        if not answer or not answer.strip():
            answer = "Xin l·ªói, Moon g·∫∑p s·ª± c·ªë khi x·ª≠ l√Ω c√¢u h·ªèi. H√£y th·ª≠ l·∫°i nh√©! üåô"
        
        await interaction.followup.send(f"{answer}")

    @app_commands.command(name="new_chat", description="üÜï B·∫Øt ƒë·∫ßu ch·ªß ƒë·ªÅ m·ªõi v·ªõi Moon")
    async def new_chat(self, interaction: discord.Interaction):
        channel_id = str(interaction.channel_id)
        CHANNEL_CHAT_IDS[channel_id] = None
        message = random.choice(NEW_CHAT_MESSAGES).format(
            user=mention_user(interaction.user)
        )
        await interaction.response.send_message(message)

    @app_commands.command(name="help", description="‚ùì H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Moon")
    async def help(self, interaction: discord.Interaction):
        help_text = (
            "**üåô H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Moon Discord Bot**\n"
            "\n"
            "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Moon! D∆∞·ªõi ƒë√¢y l√† c√°c l·ªánh h·ªØu √≠ch ƒë·ªÉ b·∫°n tr√≤ chuy·ªán v√† khai th√°c s·ª©c m·∫°nh AI c·ªßa Moon:\n"
            "\n"
            "**L·ªánh ch√≠nh:**\n"
            "- `/chat <c√¢u h·ªèi> [tool]`: ƒê·∫∑t c√¢u h·ªèi cho Moon, c√≥ th·ªÉ ch·ªçn c√¥ng c·ª• h·ªó tr·ª£.\n"
            "- `/new_chat`: B·∫Øt ƒë·∫ßu m·ªôt ch·ªß ƒë·ªÅ tr√≤ chuy·ªán ho√†n to√†n m·ªõi v·ªõi Moon.\n"
            "- `/functions`: Xem danh s√°ch c√°c function Moon c√≥ th·ªÉ s·ª≠ d·ª•ng.\n"
            "- ƒê·ªÅ c·∫≠p @MoonBot trong k√™nh ƒë·ªÉ h·ªèi nhanh b·∫±ng tin nh·∫Øn th√¥ng th∆∞·ªùng.\n"
            "\n"
            "**C√¥ng c·ª• h·ªó tr·ª£:**\n"
            "- **None**: S·ª≠ d·ª•ng AI th√¥ng th∆∞·ªùng + functions t·ª± ƒë·ªông\n"
            "- **Web search**: T√¨m ki·∫øm th√¥ng tin m·ªõi nh·∫•t tr√™n Internet + functions t·ª± ƒë·ªông\n"
            "\n"
            "**T√≠nh nƒÉng ƒë·∫∑c bi·ªát:**\n"
            "- **Functions t·ª± ƒë·ªông**: Moon s·∫Ω t·ª± ƒë·ªông s·ª≠ d·ª•ng c√°c function khi c·∫ßn thi·∫øt nh∆∞:\n"
            "  ‚Ä¢ Xem th·ªùi gian (get_current_time)\n"
            "  ‚Ä¢ Th·ªùi ti·∫øt (get_weather)\n"
            "\n"
            "**V√≠ d·ª• s·ª≠ d·ª•ng:**\n"
            "- `/chat H√£y t√≥m t·∫Øt tin t·ª©c c√¥ng ngh·ªá h√¥m nay tool:Web search`\n"
            "- `/chat M·∫•y gi·ªù r·ªìi?` (t·ª± ƒë·ªông d√πng function)\n"
            "- `/chat Th·ªùi ti·∫øt H√† N·ªôi h√¥m nay` (t·ª± ƒë·ªông d√πng function)\n"
            "\n"
            "**L∆∞u √Ω quan tr·ªçng:**\n"
            "- Moon s·∫Ω ph·∫£n h·ªìi trong v√†i gi√¢y. N·∫øu kh√¥ng th·∫•y tr·∫£ l·ªùi, c√≥ th·ªÉ do m·∫°ng ho·∫∑c h·ªá th·ªëng ƒëang b·∫≠n.\n"
            "- H√£y d√πng `/new_chat` ƒë·ªÉ l√†m m·ªõi cu·ªôc tr√≤ chuy·ªán khi chuy·ªÉn ch·ªß ƒë·ªÅ, gi√∫p Moon tr·∫£ l·ªùi ch√≠nh x√°c h∆°n.\n"
            "- Moon s·∫Ω t·ª± ƒë·ªông nh·∫≠n di·ªán v√† s·ª≠ d·ª•ng function ph√π h·ª£p, b·∫°n kh√¥ng c·∫ßn ch·ªâ ƒë·ªãnh.\n"
            "- Khi c·∫ßn th√¥ng tin m·ªõi nh·∫•t, h√£y ch·ªçn tool:Web search.\n"
            "- ƒê·ª´ng ng·∫°i h·ªèi b·∫•t c·ª© ƒëi·ªÅu g√¨!\n"
            "\n"
            "N·∫øu g·∫∑p kh√≥ khƒÉn ho·∫∑c c·∫ßn h·ªó tr·ª£ th√™m, h√£y li√™n h·ªá admin server. Ch√∫c b·∫°n tr√≤ chuy·ªán vui v·∫ª c√πng Moon! ‚ú®"
        )
        await interaction.response.send_message(help_text, ephemeral=True)

    @app_commands.command(name="functions", description="üìã Xem danh s√°ch functions c√≥ s·∫µn")
    async def functions(self, interaction: discord.Interaction):
        functions_text = (
            "**üîß Danh s√°ch Functions c√≥ s·∫µn cho Moon:**\n\n"
        )
        
        for schema in function_registry.get_schemas():
            name = schema["name"]
            description = schema["description"]
            
            functions_text += f"**{name}**: {description}\n"
            
            # Th√™m th√¥ng tin parameters n·∫øu c√≥
            if "parameters" in schema:
                params = schema["parameters"]
                if "properties" in params:
                    param_list = []
                    required = params.get("required", [])
                    for param_name, param_info in params["properties"].items():
                        param_type = param_info.get("type", "string")
                        is_required = param_name in required
                        param_desc = param_info.get("description", "")
                        
                        param_str = f"`{param_name}` ({param_type})"
                        if is_required:
                            param_str += " *[b·∫Øt bu·ªôc]*"
                        if param_desc:
                            param_str += f" - {param_desc}"
                        param_list.append(param_str)
                    
                    if param_list:
                        functions_text += f"  ‚Ä¢ Tham s·ªë: {', '.join(param_list)}\n"
            
            functions_text += "\n"
        
        functions_text += (
            "**üí° C√°ch s·ª≠ d·ª•ng:**\n"
            "- Moon s·∫Ω **t·ª± ƒë·ªông** s·ª≠ d·ª•ng function ph√π h·ª£p khi c·∫ßn\n"
            "- Kh√¥ng c·∫ßn ch·ªâ ƒë·ªãnh tool:Functions, ch·ªâ c·∫ßn h·ªèi t·ª± nhi√™n\n"
            "- V√≠ d·ª•: `/chat M·∫•y gi·ªù r·ªìi?` (t·ª± ƒë·ªông d√πng get_current_time)\n"
            "- Ho·∫∑c: `/chat Th·ªùi ti·∫øt H√† N·ªôi` (t·ª± ƒë·ªông d√πng get_weather)"
        )
        
        await interaction.response.send_message(functions_text, ephemeral=True)
        

# --- Function to send prompt to OpenAI and return the response ---
async def ask_openai(
    prompt: str,
    tool: str = "none",
    chat_id: str = None,
    images: list[str] = None,
    force_model: str = None,
) -> tuple[str, str]:
    usage = load_token_usage()
    model = force_model or OPENAI_MODEL
    if model == "gpt-4.1" and usage["gpt-4.1"] >= TOKEN_LIMITS["gpt-4.1"]:
        model = "gpt-4.1-mini"
    tools = []
    
    if tool == "web_search":
        tools.append(
            {
                "type": "web_search_preview",
                "search_context_size": "medium",
                "user_location": {
                    "type": "approximate",
                    "country": "VN",
                },
            }
        )
    
    function_tools = function_registry.get_schemas()
    if function_tools:
        tools.extend(function_tools)
    if images:
        input_blocks = [
            {"role": "user", "content": []},
        ]
        input_blocks[0]["content"].append({"type": "input_text", "text": prompt})
        for img_url in images:
            input_blocks[0]["content"].append(
                {"type": "input_image", "image_url": img_url}
            )
    else:
        input_blocks = [
            {"role": "user", "content": [{"type": "input_text", "text": prompt}]}   
        ]
    try:
        response = await openai_client.responses.create(
            model=model,
            instructions=INSTRUCTIONS,
            previous_response_id=chat_id,
            input=input_blocks,
            tools=tools if tools else None,
            tool_choice="auto"
        )
    
        output_text = getattr(response, 'output_text', "").strip()
        resp_usage = getattr(response, "usage", None)
        if resp_usage:
            used = getattr(resp_usage, "total_tokens", None)
            if used:
                usage[model] = usage.get(model, 0) + used
                save_token_usage(usage)
                logging.info(
                    f"Used {used} tokens for model {model}. Total usage: {usage[model]} tokens."
                )
        
        function_results = []
        function_calls_found = False
        
        if hasattr(response, 'output') and response.output:
            for output_item in response.output:
                if hasattr(output_item, 'type') and output_item.type == "function_call":
                    func_name = getattr(output_item, 'name', None)
                    func_args_str = getattr(output_item, 'arguments', '{}')
                    call_id = getattr(output_item, 'call_id', None)
                    
                    if func_name:
                        function_calls_found = True
                        try:
                            func_args = json.loads(func_args_str) if func_args_str else {}
                        except json.JSONDecodeError as e:
                            func_args = {}

                        result = await function_registry.call_function(func_name, func_args)
                        function_results.append({
                            "call_id": call_id,
                            "name": func_name,
                            "result": result
                        })
        
        # N·∫øu c√≥ function calls, g·ª≠i k·∫øt qu·∫£ l√™n OpenAI ƒë·ªÉ c√≥ response t·ª± nhi√™n
        if function_calls_found and function_results:
            try:
                tool_call = response.output[0]

                input_blocks.append({
                    "type": "function_call",
                    "call_id": tool_call.call_id,
                    "name": tool_call.name,
                    "arguments": tool_call.arguments,
                    "id": tool_call.id,
                    "status": tool_call.status
                })

                input_blocks.append({
                    "type": "function_call_output",
                    "call_id": tool_call.call_id,
                    "output": str(result)
                })

                follow_up_response = await openai_client.responses.create(
                    model=model,
                    instructions=INSTRUCTIONS,
                    input=input_blocks,
                    previous_response_id=chat_id,
                    tools=tools if tools else None,
                    tool_choice="auto"
                )

                final_response = getattr(follow_up_response, 'output_text', "").strip()
                new_chat_id = getattr(follow_up_response, "id", chat_id)
                resp_usage = getattr(follow_up_response, "usage", None)
                if resp_usage:
                    used = getattr(resp_usage, "total_tokens", None)
                    if used:
                        usage[model] = usage.get(model, 0) + used
                        save_token_usage(usage)
                        logging.info(
                            f"Used {used} tokens for model {model}. Total usage: {usage[model]} tokens."
                        )
                
            except Exception as e:
                logging.error(f"Error getting follow-up response from OpenAI: {e}")
                original_response = str(output_text).strip() if output_text else ""
                func_display = "\n".join(
                    [f"**{r['name']}**: {r['result']}" for r in function_results]
                )
                final_response = f"{original_response}\n\n{func_display}" if original_response else func_display
                new_chat_id = getattr(response, "id", chat_id)

        else:
            final_response = str(output_text).strip() if output_text else ""
            new_chat_id = getattr(response, "id", chat_id)
        
        if model == "gpt-4.1" and usage["gpt-4.1"] > TOKEN_LIMITS["gpt-4.1"]:
            return await ask_openai(
                prompt, tool, chat_id, images, force_model="gpt-4.1-mini"
            )
        
        return final_response, new_chat_id
    except Exception as e:
        return f"OpenAI error: {e}", chat_id


# --- Token usage tracking ---
TOKEN_USAGE_FILE = os.path.join(os.path.dirname(__file__), "token_usage.json")
TOKEN_LIMITS = {
    "gpt-4.1": 240_000,
    "gpt-4.1-mini": 2_490_000,
}


def load_token_usage():
    today = datetime.now().strftime("%Y-%m-%d")
    if not os.path.exists(TOKEN_USAGE_FILE):
        usage = {"date": today, "gpt-4.1": 0, "gpt-4.1-mini": 0}
        with open(TOKEN_USAGE_FILE, "w", encoding="utf-8") as f:
            json.dump(usage, f)
        return usage
    with open(TOKEN_USAGE_FILE, "r", encoding="utf-8") as f:
        usage = json.load(f)
    if usage.get("date") != today:
        usage = {"date": today, "gpt-4.1": 0, "gpt-4.1-mini": 0}
        with open(TOKEN_USAGE_FILE, "w", encoding="utf-8") as f:
            json.dump(usage, f)
    return usage


def save_token_usage(usage):
    with open(TOKEN_USAGE_FILE, "w", encoding="utf-8") as f:
        json.dump(usage, f)


# --- Discord bot events ---
@bot.event
async def on_ready():
    logging.info(f"{bot.user} is online and ready to chat!")
    if STATUS:
        await bot.change_presence(activity=discord.Game(STATUS))


@bot.event
async def on_message(message: discord.Message):
    if message.author == bot.user:
        return
    if bot.user in message.mentions:
        channel_id = str(message.channel.id)
        chat_id = CHANNEL_CHAT_IDS.get(channel_id)
        async with message.channel.typing():
            user_mention = mention_user(message.author)
            prompt_content = (
                message.content.replace(f"<@{bot.user.id}>", "")
                .replace(f"<@!{bot.user.id}>", "")
                .strip()
            )
            image_urls = [
                att.url
                for att in message.attachments
                if (att.content_type and att.content_type.startswith("image/"))
                or att.filename.lower().endswith(
                    (".png", ".jpg", ".jpeg", ".webp", ".gif")
                )
            ]
            if not prompt_content and not image_urls:
                support_message = random.choice(SUPPORT_MESSAGES).format(
                    user=user_mention
                )
                await message.reply(support_message)
                return
            prompt = (
                f"<@{message.author.id}>: {prompt_content}"
                if prompt_content
                else f"<@{message.author.id}> g·ª≠i ·∫£nh:"
            )
            answer, new_chat_id = await ask_openai(
                prompt, chat_id=chat_id, images=image_urls if image_urls else None
            )
            CHANNEL_CHAT_IDS[channel_id] = new_chat_id
            await message.reply(f"{answer}")
    await bot.process_commands(message)


async def main():
    try:
        await bot.start(DISCORD_TOKEN)
    except discord.errors.HTTPException as e:
        logging.error(e)
        logging.error("\n\n\nBLOCKED BY RATE LIMITS\n\n\n")


if __name__ == "__main__":
    asyncio.run(main())
