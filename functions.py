#!/usr/bin/env python3.10

"""
Functions cho Moon Discord Bot

File n√†y ch·ª©a t·∫•t c·∫£ c√°c function m√† Moon c√≥ th·ªÉ g·ªçi th√¥ng qua OpenAI function calling.
"""

import aiohttp

def register_all_functions(function_registry):
    """ƒêƒÉng k√Ω t·∫•t c·∫£ functions v√†o registry"""
    
    @function_registry.register(
        name="get_current_time",
        description="L·∫•y th·ªùi gian hi·ªán t·∫°i",
        parameters={}
    )
    async def get_current_time() -> str:
        """Tr·∫£ v·ªÅ th·ªùi gian hi·ªán t·∫°i"""
        try:
            from datetime import datetime
            now = datetime.utcnow()
            return "Gi·ªù UTC: " + now.strftime("%Y-%m-%d %H:%M:%S")
        except Exception as e:
            return f"‚ùå L·ªói khi l·∫•y th·ªùi gian: {str(e)}"

    # @function_registry.register(
    #     name="get_weather",
    #     description="L·∫•y th√¥ng tin th·ªùi ti·∫øt th·ª±c t·∫ø t·ª´ Open-Meteo API",
    #     parameters={
    #         "type": "object", 
    #         "properties": {
    #             "city": {
    #                 "type": "string",
    #                 "description": "T√™n th√†nh ph·ªë ho·∫∑c ƒë·ªãa ƒëi·ªÉm"
    #             }
    #         },
    #         "required": ["city"],
    #         "additionalProperties": False
    #     }
    # )
    # async def get_weather(city: str) -> str:
    #     """L·∫•y th√¥ng tin th·ªùi ti·∫øt th·ª±c t·ª´ Open-Meteo API"""
    #     try:
    #         # Danh s√°ch t·ªça ƒë·ªô cho c√°c t·ªânh/th√†nh ph·ªë Vi·ªát Nam (c·∫≠p nh·∫≠t 2025)
    #         city_coordinates = {
    #             # Tuy√™n Quang
    #             "tuy√™n quang": (21.8167, 105.2167),
    #             "tuyen quang": (21.8167, 105.2167),
                
    #             # Cao B·∫±ng  
    #             "cao b·∫±ng": (22.6667, 106.2583),
    #             "cao bang": (22.6667, 106.2583),
                
    #             # Lai Ch√¢u
    #             "lai ch√¢u": (22.3992, 103.4392),
    #             "lai chau": (22.3992, 103.4392),
                
    #             # L√†o Cai
    #             "l√†o cai": (21.7168, 104.8986),
    #             "lao cai": (21.7168, 104.8986),
                
    #             # Th√°i Nguy√™n
    #             "th√°i nguy√™n": (21.5928, 105.8311),
    #             "thai nguyen": (21.5928, 105.8311),
                
    #             # ƒêi·ªán Bi√™n
    #             "ƒëi·ªán bi√™n": (21.3833, 103.0167),
    #             "dien bien": (21.3833, 103.0167),
                
    #             # L·∫°ng S∆°n
    #             "l·∫°ng s∆°n": (21.8478, 106.7578),
    #             "lang son": (21.8478, 106.7578),
                
    #             # S∆°n La
    #             "s∆°n la": (21.3269, 103.9136),
    #             "son la": (21.3269, 103.9136),
                
    #             # Ph√∫ Th·ªç
    #             "ph√∫ th·ªç": (21.3000, 105.4333),
    #             "phu tho": (21.3000, 105.4333),
                
    #             # B·∫Øc Ninh
    #             "b·∫Øc ninh": (21.2767, 106.2039),
    #             "bac ninh": (21.2767, 106.2039),
                
    #             # Qu·∫£ng Ninh
    #             "qu·∫£ng ninh": (20.9000, 107.2000),
    #             "quang ninh": (20.9000, 107.2000),
                
    #             # TP. H√† N·ªôi
    #             "h√† n·ªôi": (21.0285, 105.8048),
    #             "hanoi": (21.0285, 105.8048),
    #             "ha noi": (21.0285, 105.8048),
                
    #             # TP. H·∫£i Ph√≤ng
    #             "h·∫£i ph√≤ng": (20.8651, 106.6836),
    #             "hai phong": (20.8651, 106.6836),
                
    #             # H∆∞ng Y√™n
    #             "h∆∞ng y√™n": (20.8333, 106.0833),
    #             "hung yen": (20.8333, 106.0833),
                
    #             # Ninh B√¨nh
    #             "ninh b√¨nh": (20.2539, 105.9750),
    #             "ninh binh": (20.2539, 105.9750),
                
    #             # Thanh H√≥a
    #             "thanh h√≥a": (19.8075, 105.7764),
    #             "thanh hoa": (19.8075, 105.7764),
                
    #             # Ngh·ªá An
    #             "ngh·ªá an": (18.6795, 105.6814),
    #             "nghe an": (18.6795, 105.6814),
    #             "vinh": (18.6795, 105.6814),
                
    #             # H√† Tƒ©nh
    #             "h√† tƒ©nh": (18.3333, 105.9000),
    #             "ha tinh": (18.3333, 105.9000),
                
    #             # Qu·∫£ng Tr·ªã
    #             "qu·∫£ng tr·ªã": (17.4831, 106.5997),
    #             "quang tri": (17.4831, 106.5997),
                
    #             # TP. Hu·∫ø
    #             "hu·∫ø": (16.4667, 107.5792),
    #             "hue": (16.4667, 107.5792),
                
    #             # TP. ƒê√† N·∫µng
    #             "ƒë√† n·∫µng": (16.0471, 108.2062),
    #             "da nang": (16.0471, 108.2062),
                
    #             # Qu·∫£ng Ng√£i
    #             "qu·∫£ng ng√£i": (15.1167, 108.8000),
    #             "quang ngai": (15.1167, 108.8000),
                
    #             # Gia Lai
    #             "gia lai": (13.9861, 107.9994),
    #             "pleiku": (13.9861, 107.9994),
                
    #             # ƒê·∫Øk L·∫Øk
    #             "ƒë·∫Øk l·∫Øk": (12.6842, 108.0508),
    #             "dak lak": (12.6842, 108.0508),
    #             "bu√¥n ma thu·ªôt": (12.6842, 108.0508),
    #             "buon ma thuot": (12.6842, 108.0508),
                
    #             # Kh√°nh H√≤a
    #             "kh√°nh h√≤a": (12.2564, 109.1964),
    #             "khanh hoa": (12.2564, 109.1964),
    #             "nha trang": (12.2564, 109.1964),
                
    #             # L√¢m ƒê·ªìng
    #             "l√¢m ƒë·ªìng": (11.9000, 108.4500),
    #             "lam dong": (11.9000, 108.4500),
    #             "ƒë√† l·∫°t": (11.9000, 108.4500),
    #             "da lat": (11.9000, 108.4500),
                
    #             # ƒê·ªìng Nai
    #             "ƒë·ªìng nai": (10.9641, 106.8564),
    #             "dong nai": (10.9641, 106.8564),
    #             "bi√™n h√≤a": (10.9641, 106.8564),
    #             "bien hoa": (10.9641, 106.8564),
                
    #             # T√¢y Ninh
    #             "t√¢y ninh": (10.5392, 106.4136),
    #             "tay ninh": (10.5392, 106.4136),
                
    #             # TP. H·ªì Ch√≠ Minh
    #             "h·ªì ch√≠ minh": (10.7626, 106.6602),
    #             "ho chi minh": (10.7626, 106.6602),
    #             "saigon": (10.7626, 106.6602),
    #             "s√†i g√≤n": (10.7626, 106.6602),
    #             "tp hcm": (10.7626, 106.6602),
    #             "tphcm": (10.7626, 106.6602),
                
    #             # ƒê·ªìng Th√°p
    #             "ƒë·ªìng th√°p": (10.3750, 106.2778),
    #             "dong thap": (10.3750, 106.2778),
    #             "cao l√£nh": (10.3750, 106.2778),
    #             "cao lanh": (10.3750, 106.2778),
                
    #             # An Giang
    #             "an giang": (10.3759, 105.4185),
    #             "long xuy√™n": (10.3759, 105.4185),
    #             "long xuyen": (10.3759, 105.4185),
                
    #             # Vƒ©nh Long
    #             "vƒ©nh long": (10.2500, 105.9667),
    #             "vinh long": (10.2500, 105.9667),
                
    #             # TP. C·∫ßn Th∆°
    #             "c·∫ßn th∆°": (10.0452, 105.7469),
    #             "can tho": (10.0452, 105.7469),
                
    #             # C√† Mau
    #             "c√† mau": (9.1761, 105.1508),
    #             "ca mau": (9.1761, 105.1508)
    #         }
            
    #         city_lower = city.lower().strip()
            
    #         # T√¨m t·ªça ƒë·ªô c·ªßa th√†nh ph·ªë
    #         coordinates = None
    #         for city_key, coords in city_coordinates.items():
    #             if city_lower in city_key or city_key in city_lower:
    #                 coordinates = coords
    #                 break
            
    #         if not coordinates:
    #             return f"‚ùå Kh√¥ng t√¨m th·∫•y t·ªça ƒë·ªô cho '{city}'. Bot hi·ªán h·ªó tr·ª£ t·∫•t c·∫£ 34 t·ªânh/th√†nh ph·ªë Vi·ªát Nam. H√£y th·ª≠ v·ªõi t√™n ch√≠nh th·ª©c ho·∫∑c t√™n th√¥ng d·ª•ng nh∆∞: 'Tuy√™n Quang', 'Cao B·∫±ng', 'L√†o Cai', 'Th√°i Nguy√™n', 'H√† N·ªôi', 'H·ªì Ch√≠ Minh', 'C·∫ßn Th∆°'..."
            
    #         latitude, longitude = coordinates
            
    #         # G·ªçi Open-Meteo API
    #         url = f"https://api.open-meteo.com/v1/forecast"
    #         params = {
    #             "latitude": latitude,
    #             "longitude": longitude,
    #             "current": "temperature_2m,relative_humidity_2m,weather_code,wind_speed_10m",
    #             "timezone": "Asia/Ho_Chi_Minh"
    #         }
            
    #         async with aiohttp.ClientSession() as session:
    #             async with session.get(url, params=params) as response:
    #                 if response.status != 200:
    #                     return f"‚ùå L·ªói khi g·ªçi API th·ªùi ti·∫øt (Status: {response.status})"
                    
    #                 data = await response.json()
            
    #         # X·ª≠ l√Ω d·ªØ li·ªáu th·ªùi ti·∫øt
    #         current = data.get("current", {})
    #         temp = current.get("temperature_2m")
    #         humidity = current.get("relative_humidity_2m")
    #         wind_speed = current.get("wind_speed_10m")
    #         weather_code = current.get("weather_code")
            
    #         # Chuy·ªÉn ƒë·ªïi weather code th√†nh m√¥ t·∫£
    #         weather_descriptions = {
    #             0: "‚òÄÔ∏è Tr·ªùi quang ƒë√£ng",
    #             1: "üå§Ô∏è √çt m√¢y", 2: "‚õÖ M√¢y r·∫£i r√°c", 3: "‚òÅÔ∏è Nhi·ªÅu m√¢y",
    #             45: "üå´Ô∏è S∆∞∆°ng m√π", 48: "üå´Ô∏è S∆∞∆°ng m√π ƒë√≥ng bƒÉng",
    #             51: "üåßÔ∏è M∆∞a ph√πn nh·∫π", 53: "üåßÔ∏è M∆∞a ph√πn v·ª´a", 55: "üåßÔ∏è M∆∞a ph√πn n·∫∑ng",
    #             61: "üå¶Ô∏è M∆∞a nh·∫π", 63: "üåßÔ∏è M∆∞a v·ª´a", 65: "‚õàÔ∏è M∆∞a to",
    #             71: "‚ùÑÔ∏è Tuy·∫øt nh·∫π", 73: "üå®Ô∏è Tuy·∫øt v·ª´a", 75: "‚ùÑÔ∏è Tuy·∫øt to",
    #             80: "üå¶Ô∏è M∆∞a r√†o nh·∫π", 81: "‚õàÔ∏è M∆∞a r√†o v·ª´a", 82: "‚õàÔ∏è M∆∞a r√†o to",
    #             95: "‚õàÔ∏è D√¥ng", 96: "‚õàÔ∏è D√¥ng c√≥ m∆∞a ƒë√° nh·∫π", 99: "‚õàÔ∏è D√¥ng c√≥ m∆∞a ƒë√° to"
    #         }
            
    #         weather_desc = weather_descriptions.get(weather_code, "üå°Ô∏è Kh√¥ng x√°c ƒë·ªãnh")
            
    #         # Format k·∫øt qu·∫£
    #         result = f"üåç **Th·ªùi ti·∫øt t·∫°i {city.title()}:**\n"
    #         result += f"üå°Ô∏è **Nhi·ªát ƒë·ªô:** {temp}¬∞C\n"
    #         result += f"üíß **ƒê·ªô ·∫©m:** {humidity}%\n"
    #         result += f"üí® **T·ªëc ƒë·ªô gi√≥:** {wind_speed} km/h\n"
    #         result += f"‚òÅÔ∏è **T√¨nh tr·∫°ng:** {weather_desc}\n"
    #         result += f"‚è∞ **C·∫≠p nh·∫≠t:** {current.get('time', 'N/A')}"
            
    #         return result
            
    #     except aiohttp.ClientError as e:
    #         return f"‚ùå L·ªói k·∫øt n·ªëi m·∫°ng: {str(e)}"
    #     except Exception as e:
    #         return f"‚ùå L·ªói khi l·∫•y th√¥ng tin th·ªùi ti·∫øt: {str(e)}"

    @function_registry.register(
        name="get_weather",
        description="L·∫•y th√¥ng tin th·ªùi ti·∫øt chi ti·∫øt t·ª´ OpenWeatherMap API. Y√™u c·∫ßu ng∆∞·ªùi d√πng cung c·∫•p ƒë·ªãa ch·ªâ c·ª• th·ªÉ (v√≠ d·ª•: 'Qu·∫≠n 1, TP. H·ªì Ch√≠ Minh' ho·∫∑c 'Ph∆∞·ªùng B·∫øn Ngh√©, Qu·∫≠n 1, TP.HCM')",
        parameters={
            "type": "object",
            "properties": {
                "address": {
                    "type": "string", 
                    "description": "ƒê·ªãa ch·ªâ c·ª• th·ªÉ c·ªßa ƒë·ªãa ƒëi·ªÉm c·∫ßn xem th·ªùi ti·∫øt (v√≠ d·ª•: 'Qu·∫≠n 1, TP. H·ªì Ch√≠ Minh' ho·∫∑c 'Ph∆∞·ªùng B·∫øn Ngh√©, Qu·∫≠n 1, TP.HCM')"
                }
            },
            "required": ["address"],
            "additionalProperties": False
        }
    )
    async def get_weather(address: str) -> str:
        """L·∫•y th√¥ng tin th·ªùi ti·∫øt chi ti·∫øt t·ª´ OpenWeatherMap API"""
        try:
            # Import config ƒë·ªÉ l·∫•y API key
            from config import Config
            config = Config()
            api_key = config.openweathermap_api_key
            
            if not api_key:
                return "‚ùå Ch∆∞a c·∫•u h√¨nh OpenWeatherMap API key. Vui l√≤ng li√™n h·ªá admin."
            
            # Geocoding API ƒë·ªÉ chuy·ªÉn ƒë·ªãa ch·ªâ th√†nh t·ªça ƒë·ªô
            geocoding_url = "http://api.openweathermap.org/geo/1.0/direct"
            geocoding_params = {
                "q": address,
                "limit": 1,
                "appid": api_key
            }
            
            async with aiohttp.ClientSession() as session:
                # L·∫•y t·ªça ƒë·ªô t·ª´ ƒë·ªãa ch·ªâ
                async with session.get(geocoding_url, params=geocoding_params) as response:
                    if response.status != 200:
                        return f"‚ùå L·ªói khi t√¨m ki·∫øm ƒë·ªãa ch·ªâ (Status: {response.status})"
                    
                    geo_data = await response.json()
                    
                    if not geo_data:
                        return f"‚ùå Kh√¥ng t√¨m th·∫•y ƒë·ªãa ch·ªâ '{address}'. Vui l√≤ng cung c·∫•p ƒë·ªãa ch·ªâ c·ª• th·ªÉ h∆°n (v√≠ d·ª•: 'Qu·∫≠n 1, TP. H·ªì Ch√≠ Minh')."
                    
                    location = geo_data[0]
                    lat = location['lat']
                    lon = location['lon']
                    location_name = location.get('local_names', {}).get('vi', location['name'])
                    country = location.get('country', '')
                
                # L·∫•y th√¥ng tin th·ªùi ti·∫øt t·ª´ t·ªça ƒë·ªô
                weather_url = "https://api.openweathermap.org/data/2.5/weather"
                weather_params = {
                    "lat": lat,
                    "lon": lon,
                    "appid": api_key,
                    "units": "metric",
                    "lang": "vi"
                }
                
                async with session.get(weather_url, params=weather_params) as response:
                    if response.status != 200:
                        return f"‚ùå L·ªói khi l·∫•y th√¥ng tin th·ªùi ti·∫øt (Status: {response.status})"
                    
                    weather_data = await response.json()
                
                # L·∫•y th√¥ng tin d·ª± b√°o 5 ng√†y
                forecast_url = "https://api.openweathermap.org/data/2.5/forecast"
                forecast_params = weather_params.copy()
                forecast_params["cnt"] = 8  # L·∫•y 8 m·ªëc th·ªùi gian (24 gi·ªù t·ªõi)
                
                async with session.get(forecast_url, params=forecast_params) as response:
                    if response.status == 200:
                        forecast_data = await response.json()
                    else:
                        forecast_data = None
            
            # X·ª≠ l√Ω d·ªØ li·ªáu th·ªùi ti·∫øt hi·ªán t·∫°i
            main = weather_data.get('main', {})
            weather = weather_data.get('weather', [{}])[0]
            wind = weather_data.get('wind', {})
            sys_info = weather_data.get('sys', {})
            
            temp = main.get('temp')
            feels_like = main.get('feels_like')
            temp_min = main.get('temp_min')
            temp_max = main.get('temp_max')
            humidity = main.get('humidity')
            pressure = main.get('pressure')
            
            weather_desc = weather.get('description', 'Kh√¥ng x√°c ƒë·ªãnh')
            weather_icon = weather.get('icon', '01d')
            
            wind_speed = wind.get('speed', 0) * 3.6  # Chuy·ªÉn m/s sang km/h
            wind_deg = wind.get('deg', 0)
            
            # X√°c ƒë·ªãnh h∆∞·ªõng gi√≥
            wind_directions = ["B·∫Øc", "ƒê√¥ng B·∫Øc", "ƒê√¥ng", "ƒê√¥ng Nam", "Nam", "T√¢y Nam", "T√¢y", "T√¢y B·∫Øc"]
            wind_dir_index = int((wind_deg + 22.5) / 45) % 8
            wind_direction = wind_directions[wind_dir_index]
            
            # Icon th·ªùi ti·∫øt
            weather_icons = {
                '01d': '‚òÄÔ∏è', '01n': 'üåô',
                '02d': '‚õÖ', '02n': '‚òÅÔ∏è',
                '03d': '‚òÅÔ∏è', '03n': '‚òÅÔ∏è',
                '04d': '‚òÅÔ∏è', '04n': '‚òÅÔ∏è',
                '09d': 'üåßÔ∏è', '09n': 'üåßÔ∏è',
                '10d': 'üå¶Ô∏è', '10n': 'üåßÔ∏è',
                '11d': '‚õàÔ∏è', '11n': '‚õàÔ∏è',
                '13d': 'üå®Ô∏è', '13n': 'üå®Ô∏è',
                '50d': 'üå´Ô∏è', '50n': 'üå´Ô∏è'
            }
            
            icon = weather_icons.get(weather_icon, 'üå°Ô∏è')
            
            # Format k·∫øt qu·∫£
            result = f"üìç **Th·ªùi ti·∫øt t·∫°i {location_name}, {country}**\n"
            result += f"üó∫Ô∏è **ƒê·ªãa ch·ªâ:** {address}\n\n"
            
            result += f"**üå°Ô∏è Hi·ªán t·∫°i:**\n"
            result += f"{icon} **T√¨nh tr·∫°ng:** {weather_desc.capitalize()}\n"
            result += f"üå°Ô∏è **Nhi·ªát ƒë·ªô:** {temp:.1f}¬∞C (C·∫£m gi√°c nh∆∞ {feels_like:.1f}¬∞C)\n"
            result += f"üìä **Dao ƒë·ªông:** {temp_min:.1f}¬∞C - {temp_max:.1f}¬∞C\n"
            result += f"üíß **ƒê·ªô ·∫©m:** {humidity}%\n"
            result += f"üå¨Ô∏è **Gi√≥:** {wind_speed:.1f} km/h - H∆∞·ªõng {wind_direction}\n"
            result += f"üîµ **√Åp su·∫•t:** {pressure} hPa\n"
            
            # Th√™m d·ª± b√°o n·∫øu c√≥
            if forecast_data:
                result += f"\n**üìÖ D·ª± b√°o 24 gi·ªù t·ªõi:**\n"
                forecast_list = forecast_data.get('list', [])[:8]  # L·∫•y 8 m·ªëc ƒë·∫ßu ti√™n
                
                seen_dates = set()
                for forecast in forecast_list[:3]:  # Ch·ªâ hi·ªÉn th·ªã 3 m·ªëc th·ªùi gian
                    dt_txt = forecast.get('dt_txt', '')
                    date_time = dt_txt.split(' ')
                    if len(date_time) == 2:
                        time = date_time[1][:5]  # L·∫•y gi·ªù:ph√∫t
                        
                        forecast_main = forecast.get('main', {})
                        forecast_weather = forecast.get('weather', [{}])[0]
                        forecast_temp = forecast_main.get('temp', 0)
                        forecast_desc = forecast_weather.get('description', '')
                        forecast_icon_code = forecast_weather.get('icon', '01d')
                        forecast_icon = weather_icons.get(forecast_icon_code, 'üå°Ô∏è')
                        
                        result += f"  ‚Ä¢ {time}: {forecast_icon} {forecast_temp:.1f}¬∞C - {forecast_desc}\n"
            
            # Th·ªùi gian c·∫≠p nh·∫≠t
            from datetime import datetime
            update_time = datetime.now().strftime("%H:%M %d/%m/%Y")
            result += f"\n‚è∞ **C·∫≠p nh·∫≠t:** {update_time}"
            
            return result
            
        except aiohttp.ClientError as e:
            return f"‚ùå L·ªói k·∫øt n·ªëi m·∫°ng: {str(e)}"
        except KeyError as e:
            return f"‚ùå L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu th·ªùi ti·∫øt: {str(e)}"
        except Exception as e:
            return f"‚ùå L·ªói khi l·∫•y th√¥ng tin th·ªùi ti·∫øt: {str(e)}"